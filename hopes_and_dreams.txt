 *implement a gui (or make a gui jar version to run alongside the terminal version, purely for preference) gui :enable, gui :disable (saves this setting and, if enabled, will always start the gui upon start up)
 *add a quadratic command
 *basic algebra II functions (vertex finder, parallel line finder, etc.)
 *degree to radians and visa versa
 *make some geometry commands
 *add a system that saves the most recent answer to be used in the next call when 'ans' is written in the mathematical functions
 *maybe add a precision system where the user can decide how precise they want the output (maybe with a bunch of other settings & customizations (under 'settings'))
 *make the result of the calculation only print if the numeral function returns true (minor)
 *patch the text wrapper (minor)
 *make a time out function for afk users (added timeout bool and timeout duration to the settings file to be edited) (minor)
 *migrate all syntax related operations to syntax.java (do ittttttt)
 *have an uploaded change log file on the internet that can be downloaded instead of the old compiled version (using media fire acct and perma link)
 *set a background image (to the gui)
 *have a resource usage command under settings or something to show the RAM and CPU usage of the program
 *use yml files
 *make a github repo
 *make a gui graphing window
 *convert the current terminal into a developer and settings terminal once the gui is set up
 *make a syntax checker that detects the character sequence 'pi' and fills in the value of pi in the expression
 *make the loops for things like settings and interface fully terminate when the back command is issued
 *(maybe) allow for a popup num pad in the gui
 *make a data upload function that provides me with all logs, add a true or false setting, if the setting is null, prompt the user y or n if they would like to share logs